<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Data</name>
    </assembly>
    <members>
        <member name="T:Ivony.Data.BasicExecuteExtensions">
            <summary>
            提供基本的查询方法扩展
            </summary>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteDataTable(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并将第一个结果集包装成 DataTable 返回
            </summary>
            <param name="query">要执行的查询对象</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteDataTableAsync(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            异步执行查询并将第一个结果集包装成 DataTable 返回
            </summary>
            <param name="query">要执行的查询对象</param>
            <param name="token">取消指示</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteAllDataTables(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并将所有结果集包装成 DataTable 返回
            </summary>
            <param name="query">要执行的查询对象</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteAllDataTablesAsync(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            异步执行查询并将所有结果集包装成 DataTable 返回
            </summary>
            <param name="query">要执行的查询对象</param>
            <param name="token">取消指示</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteScalar(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并返回首行首列
            </summary>
            <param name="query">要执行的查询对象</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteScalarAsync(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            异步执行查询并返回首行首列
            </summary>
            <param name="query">要执行的查询对象</param>
            <param name="token">取消指示</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteNonQuery(Ivony.Data.IDbExecutable)">
            <summary>
            执行没有结果的查询
            </summary>
            <param name="query">要执行的查询对象</param>
            <returns>查询所影响的行数</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteNonQueryAsync(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            异步执行没有结果的查询
            </summary>
            <param name="query">要执行的查询对象</param>
            <param name="token">取消指示</param>
            <returns>查询所影响的行数</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteFirstRow(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并返回首行
            </summary>
            <param name="query">要执行的查询对象</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteFirstRowAsync(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            异步执行查询并返回首行
            </summary>
            <param name="query">要执行的查询对象</param>
            <param name="token">取消指示</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteScalar``1(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并返回首行首列
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="query">要执行的查询对象</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.BasicExecuteExtensions.ExecuteScalarAsync``1(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            异步执行查询并返回首行首列
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="query">要执行的查询对象</param>
            <param name="token">取消指示</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:Ivony.Data.Common.DataTableAdapter">
            <summary>
            定义用于填充 DataTable 的 DataAdapter
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DataTableAdapter.FillDataTable(System.Data.IDataReader,System.Int32,System.Int32)">
            <summary>
            使用指定范围内的行填充 DataTable 并返回。
            </summary>
            <param name="dataReader">用来读取数据的 DataReader</param>
            <param name="startRecord">要填充的起始记录位置</param>
            <param name="maxRecords">最多填充的记录条数</param>
            <returns>填充好的 DataTable</returns>
        </member>
        <member name="M:Ivony.Data.Common.DataTableAdapter.FillDataSet(System.Data.IDataReader)">
            <summary>
            从 DataReader 中读取所有数据并填充一个 DataSet 返回。
            </summary>
            <param name="dataReader">用来读取数据的 DataReader</param>
            <returns>填充好的 DataTable</returns>
        </member>
        <member name="M:Ivony.Data.Common.DataTableAdapter.FillDataTableAsync(System.Data.Common.DbDataReader,System.Int32,System.Int32)">
            <summary>
            使用指定范围内的行异步填充 DataTable 并返回。
            </summary>
            <param name="dataReader">用来读取数据的 DataReader</param>
            <param name="startRecord">要填充的起始记录位置</param>
            <param name="maxRecords">最多填充的记录条数</param>
            <returns>填充好的 DataTable</returns>
        </member>
        <member name="T:Ivony.Data.Common.DbExecuteContextBase">
            <summary>
            辅助实现 IDbExecuteContext 接口的基类
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbExecuteContextBase.#ctor(System.Data.IDataReader,Ivony.Data.IDbTracing,System.Action,System.Object)">
            <summary>
            创建数据库查询执行上下文
            </summary>
            <param name="dataReader">用于读取数据的 IDataReader 对象</param>
            <param name="tracing">用于追踪此次查询过程的追踪器</param>
            <param name="disposeMethod">销毁上下文时要执行的方法</param>
            <param name="sync">用于同步的对象，如果有的话</param>
        </member>
        <member name="P:Ivony.Data.Common.DbExecuteContextBase.DataReader">
            <summary>
            获取当前用于读取数据的 IDataReader 对象
            </summary>
        </member>
        <member name="P:Ivony.Data.Common.DbExecuteContextBase.Tracing">
            <summary>
            获取用于追踪数据查询过程的追踪器
            </summary>
        </member>
        <member name="P:Ivony.Data.Common.DbExecuteContextBase.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="P:Ivony.Data.Common.DbExecuteContextBase.DataTableAdapter">
            <summary>
            用于填充数据到 DataTable 的 DataTableAdapter 对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbExecuteContextBase.LoadDataTable(System.Int32,System.Int32)">
            <summary>
            加载数据到 DataTable
            </summary>
            <param name="startRecord">要填充的起始记录位置</param>
            <param name="maxRecords">最多填充的记录条数</param>
            <returns>填充好的 DataTable</returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecuteContextBase.NextResult">
            <summary>
            尝试读取下一个结果集
            </summary>
            <returns>若存在下一个结果集，则返回 true ，否则返回 false</returns>
        </member>
        <member name="P:Ivony.Data.Common.DbExecuteContextBase.RecordsAffected">
            <summary>
            获取更改、插入或删除的行数，如果没有任何行受到影响或语句失败，则为 0。-1 表示是 SELECT 语句。
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbExecuteContextBase.ReadRecord">
            <summary>
            读取一条记录，并将读取指针推移到下一个位置。
            </summary>
            <returns>若当前位置存在记录，则返回该记录，否则返回 null</returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecuteContextBase.OnException(System.Exception)">
            <summary>
            当结果集执行过程中产生了异常，则调用此方法来记录。
            </summary>
            <param name="exception">要记录的异常信息</param>
        </member>
        <member name="M:Ivony.Data.Common.DbExecuteContextBase.Dispose">
            <summary>
            销毁执行上下文所有相关的资源，并通知追踪器查询已经完成
            </summary>
        </member>
        <member name="T:Ivony.Data.Common.AsyncDbExecuteContextBase">
            <summary>
            辅助实现 IAsyncDbExecuteContext 接口的基类
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.AsyncDbExecuteContextBase.#ctor(System.Data.Common.DbDataReader,Ivony.Data.IDbTracing,System.Action,System.Object)">
            <summary>
            创建数据库异步查询执行上下文
            </summary>
            <param name="dataReader">用于读取数据的 IDataReader 对象</param>
            <param name="tracing">用于追踪此次查询过程的追踪器</param>
            <param name="disposeMethod">当上下文销毁时要执行的方法</param>
            <param name="sync">用于同步的对象</param>
        </member>
        <member name="P:Ivony.Data.Common.AsyncDbExecuteContextBase.DataReader">
            <summary>
            获取当前用于读取数据的 IDataReader 对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.AsyncDbExecuteContextBase.LoadDataTableAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步加载数据到 DataTable
            </summary>
            <param name="startRecord">要填充的起始记录位置</param>
            <param name="maxRecords">最多填充的记录条数</param>
            <param name="token">取消指示</param>
            <returns>填充好的 DataTable</returns>
        </member>
        <member name="M:Ivony.Data.Common.AsyncDbExecuteContextBase.NextResultAsync">
            <summary>
            尝试异步读取下一个结果集
            </summary>
            <returns>若存在下一个结果集，则返回 true ，否则返回 false</returns>
        </member>
        <member name="M:Ivony.Data.Common.AsyncDbExecuteContextBase.ReadRecordAsync">
            <summary>
            异步读取一条记录，并将读取指针推移到下一个位置。
            </summary>
            <returns>若当前位置存在记录，则返回该记录，否则返回 null</returns>
        </member>
        <member name="T:Ivony.Data.Common.DbExecutorBase">
            <summary>
            辅助实现数据库查询器的基类
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorBase.#ctor">
            <summary>
            初始化 DbExecuterBase 类型
            </summary>
        </member>
        <member name="P:Ivony.Data.Common.DbExecutorBase.TraceService">
            <summary>
            获取在追踪数据库查询过程的追踪服务
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorBase.TryCreateTracing(Ivony.Data.IDbExecutor,Ivony.Data.Queries.DbQuery)">
            <summary>
            尝试创建 IDbTracing 对象
            </summary>
            <param name="executor">查询执行器</param>
            <param name="query">即将执行的查询对象</param>
            <returns>追踪该查询执行过程的 IDbTracing 对象</returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorBase.TryCreateTracing(Ivony.Data.Queries.DbQuery)">
            <summary>
            尝试创建 IDbTracing 对象
            </summary>
            <param name="query">即将执行的查询对象</param>
            <returns>追踪该查询执行过程的 IDbTracing 对象</returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorBase.TryExecuteTracing(Ivony.Data.IDbTracing,System.Action{Ivony.Data.IDbTracing})">
            <summary>
            尝试执行查询追踪器的一个追踪方法，此方法会自动判断追踪器是否存在以及对调用中出现的异常进行异常屏蔽。
            </summary>
            <param name="tracing">查询追踪器，如果有的话</param>
            <param name="action">要执行的追踪操作</param>
        </member>
        <member name="T:Ivony.Data.Common.IAsyncDbExecutorRegisterService">
            <summary>
            提供注册异步查询执行方法的服务
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.IAsyncDbExecutorRegisterService.Register(System.Func{Ivony.Data.Queries.DbQuery,System.Boolean},System.Func{Ivony.Data.Queries.DbQuery,System.Threading.Tasks.Task{Ivony.Data.IAsyncDbExecuteContext}})">
            <summary>
            添加一个异步查询执行方法
            </summary>
            <param name="predicate">需要满足的条件</param>
            <param name="executor">查询执行方法</param>
        </member>
        <member name="T:Ivony.Data.Common.IDbExecutorRegisterService">
            <summary>
            提供注册数据库查询执行方法的服务
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.IDbExecutorRegisterService.Register(System.Func{Ivony.Data.Queries.DbQuery,System.Boolean},System.Func{Ivony.Data.Queries.DbQuery,Ivony.Data.IDbExecuteContext})">
            <summary>
            添加一个同步查询执行方法
            </summary>
            <param name="predicate">需要满足的条件</param>
            <param name="executor">查询执行方法</param>
        </member>
        <member name="T:Ivony.Data.Common.IDbExecutorBuilder">
            <summary>
            辅助构建 IDbExecutor 对象的构建器
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.IDbExecutorBuilder.Build">
            <summary>
            构建 IDbExecutor 对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ivony.Data.Common.IAsyncDbExecutorBuilder">
            <summary>
            辅助构建 IDbExecutor 对象的构建器
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.IAsyncDbExecutorBuilder.Build">
            <summary>
            构建 IDbExecutor 对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ivony.Data.Common.DbExecutorServiceExtensions">
            <summary>
            提供 DbExecutor 注册帮助方法
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorServiceExtensions.AddExecutor(Ivony.Data.Common.IDbExecutorRegisterService,System.Func{Ivony.Data.Queries.DbQuery,System.Boolean},System.Func{Ivony.Data.Queries.DbQuery,Ivony.Data.IDbExecuteContext})">
            <summary>
            注册一个查询执行器
            </summary>
            <param name="service">查询执行器注册服务</param>
            <param name="predicate">需要满足的条件</param>
            <param name="executor">查询执行器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorServiceExtensions.AddExecutor(Ivony.Data.Common.IDbExecutorRegisterService,System.Func{Ivony.Data.Queries.DbQuery,System.Boolean},Ivony.Data.IDbExecutor)">
            <summary>
            注册一个查询执行器
            </summary>
            <param name="service">查询执行器注册服务</param>
            <param name="predicate">需要满足的条件</param>
            <param name="executor">查询执行器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorServiceExtensions.AddExecutor(Ivony.Data.Common.IDbExecutorRegisterService,System.Func{Ivony.Data.Queries.DbQuery,System.Boolean},System.Func{Ivony.Data.IDbExecutor})">
            <summary>
            注册一个查询执行器
            </summary>
            <param name="service">查询执行器注册服务</param>
            <param name="predicate">需要满足的条件</param>
            <param name="executorFactory">创建查询执行器的工厂方法</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorServiceExtensions.AddExecutor(Ivony.Data.Common.IDbExecutorRegisterService,System.Type,System.Func{Ivony.Data.Queries.DbQuery,Ivony.Data.IDbExecuteContext})">
            <summary>
            注册一个查询执行器
            </summary>
            <param name="service">查询执行器注册服务</param>
            <param name="queryType">适用的查询类型</param>
            <param name="executor">查询执行器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorServiceExtensions.AddExecutor(Ivony.Data.Common.IDbExecutorRegisterService,System.Type,Ivony.Data.IDbExecutor)">
            <summary>
            注册一个查询执行器
            </summary>
            <param name="service">查询执行器注册服务</param>
            <param name="queryType">适用的查询类型</param>
            <param name="executor">查询执行器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorServiceExtensions.AddExecutor``1(Ivony.Data.Common.IDbExecutorRegisterService,System.Func{Ivony.Data.Queries.DbQuery,Ivony.Data.IDbExecuteContext})">
            <summary>
            注册一个查询执行器
            </summary>
            <param name="service">查询执行器注册服务</param>
            <typeparam name="T">适用的查询类型</typeparam>
            <param name="executor">查询执行器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbExecutorServiceExtensions.AddExecutor``1(Ivony.Data.Common.IDbExecutorRegisterService,Ivony.Data.IDbExecutor)">
            <summary>
            注册一个查询执行器
            </summary>
            <param name="service">查询执行器注册服务</param>
            <typeparam name="T">适用的查询类型</typeparam>
            <param name="executor">查询执行器</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Data.Common.DbTransactionContextBase`1.Transaction">
            <summary>
            数据库事务对象
            </summary>
        </member>
        <member name="P:Ivony.Data.Common.DbTransactionContextBase`1.Status">
            <summary>
            事务状态
            </summary>
        </member>
        <member name="P:Ivony.Data.Common.DbTransactionContextBase`1.Sync">
            <summary>
            用于同步的对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.BeginTransactionCore">
            <summary>
            派生类实现此方法以开启事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.Dispose">
            <summary>
            销毁事务上下文对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.DisposeTransaction(`0)">
            <summary>
            派生类实现此方法以销毁事务
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.GetDbExecutor(Ivony.Data.DatabaseContext)">
            <summary>
            获取查询执行器
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.GetDbExecutorCore(Ivony.Data.DatabaseContext)">
            <summary>
            派生类实现此方法以获取查询执行器
            </summary>
            <param name="context">数据访问上下文</param>
            <returns>查询执行器</returns>
        </member>
        <member name="M:Ivony.Data.Common.DbTransactionContextBase`1.CreateTransaction(Ivony.Data.DatabaseContext)">
            <summary>
            创建内嵌事务
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Data.Common.IDisposableObjectContainer">
            <summary>
            定义可销毁对象的容器，当容器销毁时，所有子对象将一并销毁。
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.IDisposableObjectContainer.RegisterDispose(System.Action)">
            <summary>
            注册当对象销毁时要调用的方法
            </summary>
            <param name="disposeMethod">对象销毁时要调用的方法</param>
        </member>
        <member name="T:Ivony.Data.Common.IParameterizedQueryParser`1">
            <summary>
            定义参数化查询解析器
            </summary>
            <typeparam name="TCommand">解析完成的命令对象的类型</typeparam>
        </member>
        <member name="M:Ivony.Data.Common.IParameterizedQueryParser`1.Parse(Ivony.Data.Queries.ParameterizedQuery)">
            <summary>
            创建查询命令对象
            </summary>
            <param name="query">参数化查询</param>
            <returns>查询命令对象</returns>
        </member>
        <member name="T:Ivony.Data.Common.ParameterizedQueryLiteralValueParser`1">
            <summary>
            辅助实现 IParameterizedQueryParser 的基类
            </summary>
            <typeparam name="TCommand">解析完成的命令对象的类型</typeparam>
        </member>
        <member name="M:Ivony.Data.Common.ParameterizedQueryLiteralValueParser`1.Parse(Ivony.Data.Queries.ParameterizedQuery)">
            <summary>
            创建查询命令
            </summary>
            <param name="query">参数化查询</param>
            <returns>查询命令</returns>
        </member>
        <member name="M:Ivony.Data.Common.ParameterizedQueryLiteralValueParser`1.CreateCommand(System.String)">
            <summary>
            派生类实现此方法以创建命令对象
            </summary>
            <param name="commandText">命令文本</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Common.ParameterizedQueryLiteralValueParser`1.GetLiteralValue(System.Object)">
            <summary>
            获取指定参数值在查询命令中的表达式
            </summary>
            <param name="value">参数值</param>
            <returns>该参数值在查询命令中的字面表达方式</returns>
        </member>
        <member name="T:Ivony.Data.Common.ParameterizedQueryParser`2">
            <summary>
            辅助实现 IParameterizedQueryParser 的基类
            </summary>
            <typeparam name="TCommand">解析完成的命令对象的类型</typeparam>
            <typeparam name="TParameter">命令参数对象的类型</typeparam>
        </member>
        <member name="P:Ivony.Data.Common.ParameterizedQueryParser`2.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Common.ParameterizedQueryParser`2.Parse(Ivony.Data.Queries.ParameterizedQuery)">
            <summary>
            创建查询命令
            </summary>
            <param name="query">参数化查询</param>
            <returns>查询命令</returns>
        </member>
        <member name="M:Ivony.Data.Common.ParameterizedQueryParser`2.GetParameterPlaceholder(System.Object,System.Int32,`1@)">
            <summary>
            派生类实现此方法产生一个参数对象，并生成一段占位符字符串。
            </summary>
            <param name="value">参数值</param>
            <param name="index">参数索引位置</param>
            <param name="parameter">参数对象</param>
            <returns>参数占位符</returns>
        </member>
        <member name="M:Ivony.Data.Common.ParameterizedQueryParser`2.CreateCommand(System.String,`1[])">
            <summary>
            创建命令对象
            </summary>
            <param name="commandText">命令文本</param>
            <param name="parameters">命令参数</param>
            <returns>命令对象</returns>
        </member>
        <member name="M:Ivony.Data.Common.ParameterizedQueryParser`2.ParseDbName(System.String)">
            <summary>
            解析 DbName 对象
            </summary>
            <param name="name">名称标识符</param>
            <returns>解析后的字符串表达形式</returns>
        </member>
        <member name="T:Ivony.Data.Common.XDocumentValueConverter">
            <summary>
            用于对 XDocument 类型对象和数据对象进行双向转换的转换器
            </summary>
        </member>
        <member name="T:Ivony.Data.DatabaseContext">
            <summary>
            数据访问上下文
            </summary>
        </member>
        <member name="T:Ivony.Data.DatabaseContext.Builder">
            <summary>
            辅助构建 DbContext 对象
            </summary>
        </member>
        <member name="P:Ivony.Data.DatabaseContext.Builder.Parent">
            <summary>
            获取父级 DbContext 对象
            </summary>
        </member>
        <member name="P:Ivony.Data.DatabaseContext.Builder.DbProvider">
            <summary>
            获取数据访问提供程序
            </summary>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.Builder.SetDbProvider(Ivony.Data.IDbProvider)">
            <summary>
            设置数据访问提供程序
            </summary>
            <param name="provider">数据访问提供程序</param>
            <returns>设置的数据访问提供程序</returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.Builder.SetAutoWhitespaceSeparator(System.Boolean)">
            <summary>
            设置自动添加空白分隔符设定
            </summary>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.Builder.RegisterService(System.Type,System.Type)">
            <summary>
            注册一个服务
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="instanceType">实现类型</param>
            <returns>DbContext构建器</returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.Builder.RegisterService(System.Type,System.Object)">
            <summary>
            注册一个服务
            </summary>
            <param name="serviceType"></param>
            <param name="serviceInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.Builder.RegisterService``1(``0)">
            <summary>
            注册一个服务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.Builder.RegisterService``1(System.Func{``0})">
            <summary>
            注册一个服务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceFactory"></param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Data.DatabaseContext.Parent">
            <summary>
            获取父级上下文
            </summary>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.TryExit">
            <summary>
            尝试退出当前上下文
            </summary>
        </member>
        <member name="P:Ivony.Data.DatabaseContext.DbProvider">
            <summary>
            需要使用的数据库访问提供程序
            </summary>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.GetService``1">
            <summary>
            获取指定类型的服务对象实例
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>服务实例</returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.CreateTransaction">
            <summary>
            创建数据库事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.CreateAsyncTransaction">
            <summary>
            创建异步数据库事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.GetExecutor">
            <summary>
            获取查询执行器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.GetAsyncExecutor">
            <summary>
            获取异步查询执行器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.GetConfiguration``1">
            <summary>
            获取指定类型的配置对象
            </summary>
            <typeparam name="T">配置类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.GetTraceService">
            <summary>
            获取当前默认的追踪服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.GetTemplateParser">
            <summary>
            获取当前默认的模板解析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DatabaseContext.GetParameterizedQueryBuilder">
            <summary>
            获取当前默认的参数化查询构建器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ivony.Data.DatabaseContext.Properties">
            <summary>
            获取当前上下文的属性设置
            </summary>
        </member>
        <member name="P:Ivony.Data.DatabaseContext.AutoWhitespaceSeparator">
            <summary>
            是否自动添加空白字符分隔符
            </summary>
        </member>
        <member name="T:Ivony.Data.DataSetExtensions">
            <summary>
            为系统的 DataSet 和 DataTable 对象提供扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.GetRowViews(System.Data.DataTable)">
            <summary>
            将 DataTable 转换为易于数据绑定的 DataRowView 对象列表
            </summary>
            <param name="table">要转换的 DataTable</param>
            <returns>易于数据绑定的形式</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.GetRows(System.Data.DataTable)">
            <summary>
            获取 DataRow 列表
            </summary>
            <param name="table">要转换的 DataTable</param>
            <returns>DataRow 列表</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.AsDictionaries(System.Data.DataTable)">
            <summary>
            将 DataTable 转换为易于数据绑定的 IDictionary&lt;string, object&gt; 对象列表
            </summary>
            <param name="table">要转换的 DataTable</param>
            <returns>易于数据绑定的形式</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.Column``1(System.Data.DataTable)">
            <summary>
            获取第一列数据
            </summary>
            <typeparam name="T">列数据类型</typeparam>
            <param name="table">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.Column``1(System.Data.DataTable,System.String)">
            <summary>
            获取指定列数据
            </summary>
            <typeparam name="T">列数据类型</typeparam>
            <param name="table">数据对象</param>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ToDictionary(System.Data.DataRow)">
            <summary>
            将 DataRow 转换为等效的 Dictionary
            </summary>
            <param name="dataItem">要转换的 DataRow</param>
            <returns>等效的 Dictionary</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ToDictionaries(System.Data.DataTable)">
            <summary>
            将 DataTable 转换为等效的 Dictionary 数组
            </summary>
            <param name="data">要转换的 DataTable</param>
            <returns>等效的 Dictionary</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ExecuteFirstColumn``1(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并返回第一列数据
            </summary>
            <typeparam name="T">列类型</typeparam>
            <param name="query">要执行的查询</param>
            <returns>第一列的数据</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ExecuteFirstColumnAsync``1(Ivony.Data.IDbExecutable)">
            <summary>
            异步执行查询并返回第一列数据
            </summary>
            <typeparam name="T">列类型</typeparam>
            <param name="query">要执行的查询</param>
            <returns>第一列的数据</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ExecuteDataRowViews(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并将数据转换为 DataRowView 集合返回
            </summary>
            <param name="query">要执行的查询</param>
            <returns>转换为 DataRowView 的数据集合</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ExecuteDataRowViewsAsync(Ivony.Data.IDbExecutable)">
            <summary>
            异步执行查询并将数据转换为 DataRowView 集合返回
            </summary>
            <param name="query">要执行的查询</param>
            <returns>转换为 DataRowView 的数据集合</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ExecuteFirstDataRowView(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并将第一行数据数据转换为 DataRowView 返回
            </summary>
            <param name="query">要执行的查询</param>
            <returns>转换为 DataRowView 的数据集合</returns>
        </member>
        <member name="M:Ivony.Data.DataSetExtensions.ExecuteFirstDataRowViewAsync(Ivony.Data.IDbExecutable)">
            <summary>
            异步执行查询并将第一行数据数据转换为 DataRowView 返回
            </summary>
            <param name="query">要执行的查询</param>
            <returns>转换为 DataRowView 的数据集合</returns>
        </member>
        <member name="T:Ivony.Data.Db">
            <summary>
            提供数据访问基本工具方法
            </summary>
        </member>
        <member name="P:Ivony.Data.Db.DbContext">
            <summary>
            获取当前数据访问上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Db.Enter(System.Action{Ivony.Data.DatabaseContext.Builder})">
            <summary>
            进入新的数据访问上下文
            </summary>
            <param name="configure">配置数据访问上下文的方法</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Db.Exit">
            <summary>
            退出当前上下文
            </summary>
        </member>
        <member name="M:Ivony.Data.Db.Initialize(System.Action{Ivony.Data.DatabaseContext.Builder})">
            <summary>
            初始化根数据访问上下文
            </summary>
        </member>
        <member name="M:Ivony.Data.Db.T(System.FormattableString)">
            <summary>
            解析模板表达式，创建参数化查询对象
            </summary>
            <param name="template">参数化模板</param>
            <returns>参数化查询</returns>
        </member>
        <member name="M:Ivony.Data.Db.Template(System.FormattableString)">
            <summary>
            解析模板表达式，创建参数化查询对象
            </summary>
            <param name="template">参数化模板</param>
            <returns>参数化查询</returns>
        </member>
        <member name="M:Ivony.Data.Db.Text(System.String)">
            <summary>
            解析模板表达式，创建参数化查询对象
            </summary>
            <param name="text">查询文本</param>
            <returns>参数化查询</returns>
        </member>
        <member name="M:Ivony.Data.Db.AsTextQuery(System.String)">
            <summary>
            将文本字符串转换为数据库查询对象
            </summary>
            <param name="queryText">查询文本</param>
            <returns>数据库查询对象</returns>
        </member>
        <member name="M:Ivony.Data.Db.EnterTransaction">
            <summary>
            在当前上下文开启一个事务执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Db.EnterTransaction(System.Action{Ivony.Data.DatabaseContext.Builder})">
            <summary>
            在当前上下文开启一个事务执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Db.Transaction(System.Action)">
            <summary>
            创建一个事务并执行
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Ivony.Data.Db.Transaction``1(System.Func{``0})">
            <summary>
            创建一个事务并执行
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Ivony.Data.Db.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="T:Ivony.Data.DbExtensions">
            <summary>
            提供数据库的一些扩展方法。
            </summary>
        </member>
        <member name="T:Ivony.Data.DbQueryExtensions">
            <summary>
            提供针对数据库查询的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Data.DbQueryExtensions.WithExecutor``1(``0,Ivony.Data.IDbExecutor)">
            <summary>
            指定查询的执行器
            </summary>
            <param name="query">数据库查询</param>
            <param name="executor">用于该查询的执行器</param>
            <returns>指定了执行器的数据库查询</returns>
        </member>
        <member name="M:Ivony.Data.DbQueryExtensions.WithExecutor``1(``0,Ivony.Data.IAsyncDbExecutor)">
            <summary>
            指定查询的执行器
            </summary>
            <param name="query">数据库查询</param>
            <param name="executor">用于该查询的执行器</param>
            <returns>指定了执行器的数据库查询</returns>
        </member>
        <member name="M:Ivony.Data.DbQueryExtensions.WithDatabase``1(``0,Ivony.Data.IDbProvider)">
            <summary>
            指定查询所属的数据库连接
            </summary>
            <param name="query">数据库查询</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Data.DbTracing">
            <summary>
            IDbTracing 的一个标准实现
            </summary>
        </member>
        <member name="M:Ivony.Data.DbTracing.#ctor(Ivony.Data.Queries.DbQuery)">
            <summary>
            创建一个 DbTracing 实例
            </summary>
            <param name="query">即将执行的查询对象</param>
        </member>
        <member name="M:Ivony.Data.DbTracing.#ctor(Ivony.Data.Queries.DbQuery,System.Action{Ivony.Data.DbTracing})">
            <summary>
            创建一个 DbTracing 实例
            </summary>
            <param name="query">即将执行的查询对象</param>
            <param name="complateCallback">当查询执行完成之后需要回调的方法</param>
        </member>
        <member name="P:Ivony.Data.DbTracing.QueryObject">
            <summary>
            获取此次查询执行的查询对象
            </summary>
        </member>
        <member name="P:Ivony.Data.DbTracing.CommandObject">
            <summary>
            获取此次查询执行的命令对象
            </summary>
        </member>
        <member name="P:Ivony.Data.DbTracing.ExecutionTime">
            <summary>
            数据库查询执行时间
            </summary>
        </member>
        <member name="P:Ivony.Data.DbTracing.QueryTime">
            <summary>
            总计查询时间（即查询执行时间+数据读取时间）
            </summary>
        </member>
        <member name="P:Ivony.Data.DbTracing.Exception">
            <summary>
            获取查询中出现的异常（如果有的话）
            </summary>
        </member>
        <member name="P:Ivony.Data.DbTracing.TraceEvents">
            <summary>
            获取查询过程中所出现的事件列表
            </summary>
        </member>
        <member name="T:Ivony.Data.DbTracing.TraceEventDescriptor">
            <summary>
            定义 DbTracing 在追踪过程中发生的事件的描述
            </summary>
        </member>
        <member name="P:Ivony.Data.DbTracing.TraceEventDescriptor.EventName">
            <summary>
            事件名称
            </summary>
        </member>
        <member name="P:Ivony.Data.DbTracing.TraceEventDescriptor.UtcTime">
            <summary>
            事件发生时间
            </summary>
        </member>
        <member name="T:Ivony.Data.DbValueConverter">
            <summary>
            提供 IDbValueConverter&lt;T&gt; 的注册点。
            </summary>
        </member>
        <member name="P:Ivony.Data.DbValueConverter.DisableConvertible">
            <summary>
            是否禁用 Convertible 对象转换（原生对象之间的转换）
            </summary>
        </member>
        <member name="M:Ivony.Data.DbValueConverter.Register``1(Ivony.Data.IDbValueConverter{``0},System.Boolean)">
            <summary>
            注册一个数据值类型转换器
            </summary>
            <typeparam name="T">需要转换的类型</typeparam>
            <param name="converter">需要注册的转换器</param>
            <param name="overwrite">是否覆盖现有的转换器</param>
        </member>
        <member name="M:Ivony.Data.DbValueConverter.Unregister``1">
            <summary>
            解除数据值类型转换器的注册
            </summary>
            <typeparam name="T">转换的类型</typeparam>
        </member>
        <member name="M:Ivony.Data.DbValueConverter.GetConverter``1">
            <summary>
            获取数据值类型转换器
            </summary>
            <typeparam name="T">需要转换的类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DbValueConverter.ConvertFrom``1(System.Object,System.String)">
            <summary>
            从数据类型转换为目标类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">数据值</param>
            <param name="dataTypeName">数据类型名称</param>
            <returns>类型转换后的结果</returns>
        </member>
        <member name="M:Ivony.Data.DbValueConverter.ConvertTo(System.Object,System.String)">
            <summary>
            将值转换为数据库可以接受的类型
            </summary>
            <param name="value">所需要转换的值对象</param>
            <param name="dataTypeName">数据库类型名称</param>
            <returns>数据库可接受的类型</returns>
        </member>
        <member name="T:Ivony.Data.DynamicExtensions">
            <summary>
            提供关于动态对象的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Data.DynamicExtensions.ToDynamic(System.Data.DataRow)">
            <summary>
            将 DataRow 转换为动态对象
            </summary>
            <param name="dataItem"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DynamicExtensions.ToDynamics(System.Data.DataTable)">
            <summary>
            将 DataTable 转换为动态对象数组
            </summary>
            <param name="data">DataTable对象</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.DynamicExtensions.ExecuteDynamics(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并将第一个结果集填充动态对象列表
            </summary>
            <param name="query">要执行的查询</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.DynamicExtensions.ExecuteDynamicsAsync(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            异步执行查询并将第一个结果集填充动态对象列表
            </summary>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.DynamicExtensions.ExecuteDynamicObject(Ivony.Data.IDbExecutable)">
            <summary>
            执行查询并将第一个结果集的第一条记录填充动态对象
            </summary>
            <param name="query">要执行的查询</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Ivony.Data.DynamicExtensions.ExecuteDynamicObjectAsync(Ivony.Data.IDbExecutable)">
            <summary>
            异步执行查询并将第一个结果集的第一条记录填充动态对象
            </summary>
            <param name="query">要执行的查询</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:Ivony.Data.EntityConvert`1">
            <summary>
            提供实体转换的静态方法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ivony.Data.EntityConvert`1.GetAttributes(System.Reflection.PropertyInfo)">
            <summary>
            获取指定属性上的特性
            </summary>
            <param name="property">要获取特性的属性</param>
            <returns>属性上所设置的特性</returns>
        </member>
        <member name="M:Ivony.Data.EntityConvert`1.GetFieldname(System.Reflection.PropertyInfo)">
            <summary>
            获取属性所对应的字段名
            </summary>
            <param name="property">要获取字段名的属性</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.EntityConvert`1.GetFillMethod">
            <summary>
            获取实体填充方法
            </summary>
            <returns>针对指定实体的转换方法</returns>
        </member>
        <member name="M:Ivony.Data.EntityConvert`1.FillEntity(System.Data.DataRow,`0)">
            <summary>
            用指定的数据对象填充实体对象
            </summary>
            <param name="dataItem">数据对象</param>
            <param name="entity">要填充的实体对象</param>
            <returns>填充好的实体对象</returns>
        </member>
        <member name="M:Ivony.Data.EntityConvert`1.GetConverter">
            <summary>
            获取实体转换器
            </summary>
            <returns>实体转换器</returns>
        </member>
        <member name="M:Ivony.Data.EntityConvert`1.CreateConverter">
            <summary>
            创建实体转换器
            </summary>
            <returns>实体转换器</returns>
        </member>
        <member name="T:Ivony.Data.EntityConvert`1.DefaultEntityConverter">
            <summary>
            提供默认的 EntityConverter 对象，这个对象什么都不做，并且被设置为可重用和需要预转换。
            </summary>
        </member>
        <member name="T:Ivony.Data.FieldNameAttribute">
            <summary>
            用于指定字段名称的特性
            </summary>
        </member>
        <member name="M:Ivony.Data.FieldNameAttribute.#ctor(System.String)">
            <summary>
            创建 FieldNameAttribute 对象
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="P:Ivony.Data.FieldNameAttribute.FieldName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="T:Ivony.Data.NonFieldAttribute">
            <summary>
            用于指示属性与任何字段没有关系
            </summary>
        </member>
        <member name="T:Ivony.Data.EntityConvertAttribute">
            <summary>
            指定类型所应使用的实体转换器
            </summary>
        </member>
        <member name="M:Ivony.Data.EntityConvertAttribute.#ctor(System.Type)">
            <summary>
            创建 EntityConvertAttribute 对象
            </summary>
            <param name="convertType">实体转换器类型</param>
        </member>
        <member name="M:Ivony.Data.EntityConvertAttribute.CreateConverter``1">
            <summary>
            创建实体转换器实例
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体转换器实例</returns>
        </member>
        <member name="T:Ivony.Data.IEntityConverter`1">
            <summary>
            定义实体转换器类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:Ivony.Data.IEntityConverter`1.Convert(System.Data.DataRow)">
            <summary>
            将数据写入实体
            </summary>
            <param name="dataItem">数据行</param>
            <returns>转换的实体对象</returns>
        </member>
        <member name="P:Ivony.Data.IEntityConverter`1.IsReusable">
            <summary>
            是否可重用
            </summary>
        </member>
        <member name="T:Ivony.Data.EntityExtensions">
            <summary>
            提供面向 Entity 的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntities``1(Ivony.Data.IDbExecutable)">
            <summary>
            查询数据库并将第一个结果集填充实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <returns>实体集</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntitiesAsync``1(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            查询数据库并将第一个结果集填充实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <returns>实体集</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntities``1(Ivony.Data.IDbExecutable,Ivony.Data.IEntityConverter{``0})">
            <summary>
            查询数据库并将第一个结果集填充实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="converter">实体转换器</param>
            <returns>实体集</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntitiesAsync``1(Ivony.Data.IDbExecutable,Ivony.Data.IEntityConverter{``0},System.Threading.CancellationToken)">
            <summary>
            查询数据库并将第一个结果集填充实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <param name="converter">实体转换器</param>
            <returns>实体集</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntities``1(Ivony.Data.IDbExecutable,System.Func{System.Data.DataRow,``0})">
            <summary>
            查询数据库并将第一个结果集填充实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="converter">实体转换器</param>
            <returns>实体集</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntitiesAsync``1(Ivony.Data.IDbExecutable,System.Func{System.Data.DataRow,``0},System.Threading.CancellationToken)">
            <summary>
            查询数据库并将第一个结果集填充实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <param name="converter">实体转换器</param>
            <returns>实体集</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntitiesAsync``1(Ivony.Data.IDbExecutable,System.Func{System.Data.DataRow,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            查询数据库并将第一个结果集填充实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <param name="converter">实体转换器</param>
            <returns>实体集</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntity``1(Ivony.Data.IDbExecutable)">
            <summary>
            查询数据库并将结果首行填充实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntityAsync``1(Ivony.Data.IDbExecutable,System.Threading.CancellationToken)">
            <summary>
            查询数据库并将结果首行填充实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntity``1(Ivony.Data.IDbExecutable,Ivony.Data.IEntityConverter{``0})">
            <summary>
            查询数据库并将结果首行填充实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="converter">实体转换方法</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntityAsync``1(Ivony.Data.IDbExecutable,Ivony.Data.IEntityConverter{``0},System.Threading.CancellationToken)">
            <summary>
            查询数据库并将结果首行填充实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <param name="converter">实体转换方法</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntity``1(Ivony.Data.IDbExecutable,System.Func{System.Data.DataRow,``0})">
            <summary>
            查询数据库并将结果首行填充实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="converter">实体转换方法</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntityAsync``1(Ivony.Data.IDbExecutable,System.Func{System.Data.DataRow,``0},System.Threading.CancellationToken)">
            <summary>
            异步查询数据库并将结果首行填充实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <param name="converter">实体转换方法</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ExecuteEntityAsync``1(Ivony.Data.IDbExecutable,System.Func{System.Data.DataRow,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            异步查询数据库并将结果首行填充实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <param name="converter">异步实体转换方法</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ToEntity``1(System.Data.DataRow)">
            <summary>
            将 DataRow 转换为实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="dataItem">包含数据的 DataRow</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.ToEntity``1(System.Data.DataRow,Ivony.Data.IEntityConverter{``0})">
            <summary>
            将 DataRow 转换为实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="dataItem">包含数据的 DataRow</param>
            <param name="converter">实体转换器</param>
            <returns>实体</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.FieldValue``1(System.Data.DataRow,System.Int32)">
            <summary>
            获取指定字段的值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="dataRow">数据行</param>
            <param name="columnIndex">要返回的列的序号</param>
            <returns>强类型的值</returns>
        </member>
        <member name="M:Ivony.Data.EntityExtensions.FieldValue``1(System.Data.DataRow,System.String)">
            <summary>
            获取指定字段的值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="dataRow">数据行</param>
            <param name="columnName">要返回其值的列名称</param>
            <returns>强类型的值</returns>
        </member>
        <member name="T:Ivony.Data.IDbExecutable">
            <summary>
            这个接口指示该对象是一个可以执行的查询对象
            </summary>
        </member>
        <member name="T:Ivony.Data.IDbExecuteContext">
            <summary>
            查询执行上下文
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbExecuteContext.LoadDataTable(System.Int32,System.Int32)">
            <summary>
            将当前结果集数据填充 DataTable 并返回
            </summary>
            <param name="startRecord">填充的起始记录位置</param>
            <param name="maxRecords">最大要填充的记录条数</param>
            <returns>填充了数据的 DataTable</returns>
        </member>
        <member name="M:Ivony.Data.IDbExecuteContext.NextResult">
            <summary>
            尝试读取下一个结果集
            </summary>
            <returns>若存在下一个结果集，则返回 true ，否则返回 false</returns>
        </member>
        <member name="P:Ivony.Data.IDbExecuteContext.RecordsAffected">
            <summary>
            获取更改、插入或删除的行数，如果没有任何行受到影响或语句失败，则为 0。-1 表示是 SELECT 语句。
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbExecuteContext.ReadRecord">
            <summary>
            读取一条记录，并将读取指针推移到下一个位置。
            </summary>
            <returns>若当前位置存在记录，则返回该记录，否则返回 null</returns>
        </member>
        <member name="P:Ivony.Data.IDbExecuteContext.SyncRoot">
            <summary>
            获取用于确保同步查询过程的同步对象
            </summary>
        </member>
        <member name="T:Ivony.Data.IAsyncDbExecuteContext">
            <summary>
            异步查询执行上下文
            </summary>
        </member>
        <member name="M:Ivony.Data.IAsyncDbExecuteContext.LoadDataTableAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步将当前结果集数据填充 DataTable 并返回
            </summary>
            <param name="startRecord">填充的起始记录位置</param>
            <param name="maxRecords">最大要填充的记录条数</param>
            <param name="token">取消指示</param>
            <returns>填充了数据的 DataTable</returns>
        </member>
        <member name="M:Ivony.Data.IAsyncDbExecuteContext.NextResultAsync">
            <summary>
            尝试异步读取下一个结果集
            </summary>
            <returns>若存在下一个结果集，则返回 true ，否则返回 false</returns>
        </member>
        <member name="M:Ivony.Data.IAsyncDbExecuteContext.ReadRecordAsync">
            <summary>
            异步读取一条记录，并将读取指针推移到下一个位置。
            </summary>
            <returns>若当前位置存在记录，则返回该记录，否则返回 null</returns>
        </member>
        <member name="T:Ivony.Data.IDbExecutor">
            <summary>
            定义可以同步执行某类型查询的数据库查询执行程序所需要实现的接口
            </summary>
            <typeparam name="T">查询类型</typeparam>
        </member>
        <member name="M:Ivony.Data.IDbExecutor.Execute(Ivony.Data.Queries.DbQuery)">
            <summary>
            执行查询
            </summary>
            <param name="query">查询对象</param>
            <returns>查询执行上下文</returns>
        </member>
        <member name="T:Ivony.Data.IAsyncDbExecutor">
            <summary>
            定义可以异步执行某类型查询的数据库查询执行程序所需要实现的接口
            </summary>
            <typeparam name="T">查询类型</typeparam>
        </member>
        <member name="M:Ivony.Data.IAsyncDbExecutor.ExecuteAsync(Ivony.Data.Queries.DbQuery,System.Threading.CancellationToken)">
            <summary>
            异步执行查询
            </summary>
            <param name="query">要执行的查询</param>
            <param name="token">取消指示</param>
            <returns>查询执行上下文</returns>
        </member>
        <member name="T:Ivony.Data.IDbProvider">
            <summary>
            IDbExecutor 提供程序
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbProvider.GetDbExecutor(Ivony.Data.DatabaseContext)">
            <summary>
            获取数据库查询执行器
            </summary>
            <param name="context">当前数据库访问上下文</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.IDbProvider.CreateTransaction(Ivony.Data.DatabaseContext)">
            <summary>
            创建事务上下文
            </summary>
            <param name="context">当前数据库访问上下文</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Data.IDbProvider.DbServiceProvider">
            <summary>
            获取一个服务提供程序，用于获取数据库相关的服务
            </summary>
        </member>
        <member name="T:Ivony.Data.IDbTraceService">
            <summary>
            定义对数据库查询过程进行追踪记录的服务
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbTraceService.CreateTracing(Ivony.Data.IDbExecutor,Ivony.Data.Queries.DbQuery)">
            <summary>
            当开始执行一个查询时，框架调用此方法创建一个追踪器，关于这个查询的所有消息，将记录到这个追踪器
            </summary>
            <param name="executor">正在执行查询的查询执行器</param>
            <param name="query">正在执行的查询对象</param>
            <returns>实现类应返回一个追踪器，用于记录日志信息。</returns>
        </member>
        <member name="T:Ivony.Data.IDbTracing">
            <summary>
            定义对数据库查询进行追踪的记录器
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbTracing.OnExecuting(System.Object)">
            <summary>
            通知追踪记录器正在执行查询
            </summary>
            <param name="commandObject">查询命令对象</param>
        </member>
        <member name="M:Ivony.Data.IDbTracing.OnLoadingData(Ivony.Data.IDbExecuteContext)">
            <summary>
            通知追踪记录器正在加载数据。
            </summary>
            <param name="context">查询执行上下文</param>
        </member>
        <member name="M:Ivony.Data.IDbTracing.OnComplete">
            <summary>
            通知追踪记录器查询已经全部完成。
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbTracing.OnException(System.Exception)">
            <summary>
            通知追踪记录器查询数据库时出现了异常。
            </summary>
            <param name="exception">异常信息</param>
        </member>
        <member name="T:Ivony.Data.IDbTransactionContext">
            <summary>
            定义数据库事务上下文
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbTransactionContext.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbTransactionContext.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Ivony.Data.IDbTransactionContext.BeginTransaction">
            <summary>
            开启事务，若事务创建时已经开启，则调用该方法没有副作用
            </summary>
        </member>
        <member name="P:Ivony.Data.IDbTransactionContext.Status">
            <summary>
            获取事务状态
            </summary>
        </member>
        <member name="T:Ivony.Data.IAsyncDbTransactionContext">
            <summary>
            定义异步数据库事务上下文
            </summary>
        </member>
        <member name="M:Ivony.Data.IAsyncDbTransactionContext.CommitAsync">
            <summary>
            异步提交事务
            </summary>
        </member>
        <member name="M:Ivony.Data.IAsyncDbTransactionContext.RollbackAsync">
            <summary>
            异步回滚事务
            </summary>
        </member>
        <member name="M:Ivony.Data.IAsyncDbTransactionContext.BeginTransactionAsync">
            <summary>
            异步开启事务，若事务创建时已经开启，则调用该方法没有副作用
            </summary>
        </member>
        <member name="T:Ivony.Data.TransactionStatus">
            <summary>
            获取事务状态
            </summary>
        </member>
        <member name="F:Ivony.Data.TransactionStatus.NotBeginning">
            <summary>事务尚未开始</summary>
        </member>
        <member name="F:Ivony.Data.TransactionStatus.Running">
            <summary>事务正在执行</summary>
        </member>
        <member name="F:Ivony.Data.TransactionStatus.Completed">
            <summary>事务已完成</summary>
        </member>
        <member name="T:Ivony.Data.IDbValueConverter`1">
            <summary>
            定义数据值类型转换器
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
        </member>
        <member name="M:Ivony.Data.IDbValueConverter`1.ConvertValueFrom(System.Object,System.String)">
            <summary>
            从数据对象转换为特定类型
            </summary>
            <param name="dataValue">数据值</param>
            <param name="dataType">参考的数据库数据类型</param>
            <returns>目标类型的值</returns>
        </member>
        <member name="M:Ivony.Data.IDbValueConverter`1.ConvertValueTo(System.Object,System.String)">
            <summary>
            转换目标类型值为数据
            </summary>
            <param name="value">特定类型的值</param>
            <param name="dataType">参考的数据库数据类型（如果有的话）</param>
            <returns>数据值</returns>
        </member>
        <member name="T:Ivony.Data.Queries.DbName">
            <summary>
            表示数据库对象名称
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.DbName.#ctor(System.String)">
            <summary>
            创建 DbName 对象
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="P:Ivony.Data.Queries.DbName.Name">
            <summary>
            对象名称
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.DbName.ToString">
            <summary>
            重写 ToString 方法，输出数据对象名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ivony.Data.Queries.DbQuery">
            <summary>
            代表一个查询对象
            </summary>
        </member>
        <member name="P:Ivony.Data.Queries.DbQuery.Configures">
            <summary>
            获取查询配置
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.DbQuery.NotSupported">
            <summary>
            产生一个不支持查询执行的异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Queries.DbQuery.NotSupportedAsync">
            <summary>
            产生一个不支持异步执行的异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Queries.DbQuery.Execute">
            <summary>
            同步执行查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.Queries.DbQuery.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行查询
            </summary>
            <param name="token">取消查询标识</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Data.Queries.DbQuery`1">
            <summary>
            代表一个查询对象
            </summary>
        </member>
        <member name="T:Ivony.Data.Queries.DbQueryConfigures">
            <summary>
            定义查询配置
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.DbQueryConfigures.#ctor">
            <summary>
            创建 DbQueryConfigures 对象
            </summary>
        </member>
        <member name="F:Ivony.Data.Queries.DbQueryConfigures._settings">
            <summary>
            获取用于储存查询配置的字典对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.DbQueryConfigures.GetService``1">
            <summary>
            获取与查询关联的指定类型的服务对象
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <returns>服务对象</returns>
        </member>
        <member name="M:Ivony.Data.Queries.DbQueryConfigures.SetService``1(``0)">
            <summary>
            设置与查询关联的服务对象
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="serviceInstance">服务对象</param>
        </member>
        <member name="M:Ivony.Data.Queries.DbQueryConfigures.Merge(Ivony.Data.Queries.DbQueryConfigures)">
            <summary>
            合并两个查询配置对象
            </summary>
            <param name="configures">要与当前查询配置对象合并的查询配置对象</param>
            <returns>合并后的查询配置对象</returns>
        </member>
        <member name="T:Ivony.Data.Queries.IParameterizedQueryBuilder">
            <summary>
            定义参数化查询对象构建器
            </summary>
        </member>
        <member name="P:Ivony.Data.Queries.IParameterizedQueryBuilder.SyncRoot">
            <summary>
            用于锁定和同步的对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.IParameterizedQueryBuilder.Append(System.Char)">
            <summary>
            添加一个字符到查询文本
            </summary>
            <param name="ch">要添加到查询文本末尾的字符</param>
        </member>
        <member name="M:Ivony.Data.Queries.IParameterizedQueryBuilder.Append(System.String)">
            <summary>
            添加一段查询文本
            </summary>
            <param name="text">要添加到末尾的查询文本</param>
        </member>
        <member name="M:Ivony.Data.Queries.IParameterizedQueryBuilder.Append(Ivony.Data.Queries.DbName)">
            <summary>
            添加一个数据库对象名称
            </summary>
            <param name="name">数据库对象名称</param>
        </member>
        <member name="M:Ivony.Data.Queries.IParameterizedQueryBuilder.AppendParameter(System.Object)">
            <summary>
            添加一个查询参数
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="M:Ivony.Data.Queries.IParameterizedQueryBuilder.BuildQuery(Ivony.Data.Queries.DbQueryConfigures)">
            <summary>
            创建参数化查询对象实例
            </summary>
            <param name="configures">要应用于该查询的配置信息</param>
            <returns>参数化查询对象</returns>
        </member>
        <member name="T:Ivony.Data.Queries.IParameterizedQueryPartial">
            <summary>
            定义可以作为参数化查询的片段的对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.IParameterizedQueryPartial.AppendTo(Ivony.Data.Queries.IParameterizedQueryBuilder)">
            <summary>
            将该片段添加到正在构建的参数化查询的末尾
            </summary>
            <param name="builder">参数化查询构建器</param>
        </member>
        <member name="T:Ivony.Data.Queries.ParameterizedQuery">
            <summary>
            代表一个参数化查询
            </summary>
        </member>
        <member name="F:Ivony.Data.Queries.ParameterizedQuery.ParameterPlaceholdRegex">
            <summary>
            定义匹配占位符的正则表达式
            </summary>
        </member>
        <member name="F:Ivony.Data.Queries.ParameterizedQuery.SystemParameterPlaceholdRegex">
            <summary>
            定义系统参数占位符的正则表达式
            </summary>
        </member>
        <member name="P:Ivony.Data.Queries.ParameterizedQuery.TextTemplate">
            <summary>
            获取查询文本模板
            </summary>
        </member>
        <member name="P:Ivony.Data.Queries.ParameterizedQuery.ParameterValues">
            <summary>
            获取参数值
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQuery.IsEmpty">
            <summary>
            判断该参数化查询是否为一个空的查询
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQuery.#ctor(System.String,System.Object[],Ivony.Data.Queries.DbQueryConfigures)">
            <summary>
            构建参数化查询对象
            </summary>
            <param name="template">查询文本模板</param>
            <param name="values">参数值</param>
            <param name="configures">查询配置数据</param>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQuery.AppendTo(Ivony.Data.Queries.IParameterizedQueryBuilder)">
            <summary>
            将参数化查询解析为另一个参数化查询的一部分。
            </summary>
            <param name="builder">参数化查询构建器</param>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQuery.ToString">
            <summary>
            重写 ToString 方法，输出参数化查询的字符串表达形式
            </summary>
            <returns>字符串表达形式</returns>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQuery.op_Addition(Ivony.Data.Queries.ParameterizedQuery,Ivony.Data.Queries.ParameterizedQuery)">
            <summary>
            串联两个参数化查询对象
            </summary>
            <param name="query1">第一个参数化查询对象</param>
            <param name="query2">第二个参数化查询对象</param>
            <returns>串联后的参数化查询对象</returns>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQuery.op_Addition(Ivony.Data.Queries.ParameterizedQuery,System.FormattableString)">
            <summary>
            串联两个参数化查询对象
            </summary>
            <param name="query1">第一个参数化查询对象</param>
            <param name="query2">第二个参数化查询对象</param>
            <returns>串联后的参数化查询对象</returns>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQuery.op_Addition(System.FormattableString,Ivony.Data.Queries.ParameterizedQuery)">
            <summary>
            串联两个参数化查询对象
            </summary>
            <param name="query1">第一个参数化查询对象</param>
            <param name="query2">第二个参数化查询对象</param>
            <returns>串联后的参数化查询对象</returns>
        </member>
        <member name="T:Ivony.Data.Queries.ParameterizedQueryBuilder">
            <summary>
            辅助构建 ParameterizedQuery 对象
            </summary>
        </member>
        <member name="P:Ivony.Data.Queries.ParameterizedQueryBuilder.SyncRoot">
            <summary>
            用于同步的对象
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQueryBuilder.Append(System.String)">
            <summary>
            添加一段查询文本
            </summary>
            <param name="text">要添加到末尾的查询文本</param>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQueryBuilder.Append(System.Char)">
            <summary>
            添加一个字符到查询文本
            </summary>
            <param name="ch">要添加到查询文本末尾的字符</param>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQueryBuilder.Append(Ivony.Data.Queries.DbName)">
            <summary>
            添加一个数据库对象名称（构建实际查询对象时将进行必要的编码）。
            </summary>
            <param name="name">数据库对象名称</param>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQueryBuilder.AppendParameter(System.Object)">
            <summary>
            添加一个查询参数
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQueryBuilder.BuildQuery(Ivony.Data.Queries.DbQueryConfigures)">
            <summary>
            创建参数化查询对象实例
            </summary>
            <param name="configures">要应用于查询的配置项</param>
            <returns>参数化查询对象</returns>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterizedQueryBuilder.AppendPartial(Ivony.Data.Queries.IParameterizedQueryPartial)">
            <summary>
            在当前位置添加一个部分查询
            </summary>
            <param name="partial">要添加的部分查询对象</param>
        </member>
        <member name="T:Ivony.Data.Queries.ParameterList">
            <summary>
            定义参数列表
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterList.Create(System.Runtime.CompilerServices.ITuple,System.String)">
            <summary>
            从 Tuple 创建 ParameterList 对象
            </summary>
            <param name="tuple">Tuple 对象</param>
            <returns>参数列表对象</returns>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterList.#ctor(System.Array,System.String)">
            <summary>
            创建 ParameterArray 对象
            </summary>
            <param name="parameters">参数列表</param>
            <param name="separator">分隔符</param>
        </member>
        <member name="M:Ivony.Data.Queries.ParameterList.AppendTo(Ivony.Data.Queries.IParameterizedQueryBuilder)">
            <summary>
            实现 AppendTo 方法，将自身加入到参数化查询中
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Ivony.Data.Queries.StoredProcedureQuery">
            <summary>
            存储过程表达式
            </summary>
        </member>
        <member name="M:Ivony.Data.Queries.StoredProcedureQuery.#ctor(System.String,Ivony.Data.Queries.DbQueryConfigures)">
            <summary>
            创建 StoredProcedureExpression 对象
            </summary>
            <param name="name">存储过程名称</param>
        </member>
        <member name="M:Ivony.Data.Queries.StoredProcedureQuery.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Ivony.Data.Queries.DbQueryConfigures)">
            <summary>
            创建 StoredProcedureExpression 对象
            </summary>
            <param name="name">存储过程名称</param>
            <param name="parameters">存储过程参数列表</param>
        </member>
        <member name="P:Ivony.Data.Queries.StoredProcedureQuery.Name">
            <summary>
            存储过程名称
            </summary>
        </member>
        <member name="P:Ivony.Data.Queries.StoredProcedureQuery.Parameters">
            <summary>
            存储过程参数列表
            </summary>
        </member>
        <member name="P:Ivony.Data.Queries.StoredProcedureQuery.Configures">
            <summary>
            应用于此查询的配置项
            </summary>
        </member>
        <member name="T:Ivony.Data.TemplateParser">
            <summary>
            SQL模板解析器
            </summary>
        </member>
        <member name="M:Ivony.Data.TemplateParser.#ctor(System.IServiceProvider)">
            <summary>
            创建 TemplateParser 对象
            </summary>
            <param name="services">服务提供程序</param>
        </member>
        <member name="M:Ivony.Data.TemplateParser.ParseTemplate(Ivony.Data.Queries.IParameterizedQueryBuilder,System.FormattableString)">
            <summary>
            解析查询模板
            </summary>
            <param name="builder">参数化查询构建器</param>
            <param name="templateText">模板文本</param>
            <param name="args">模板参数</param>
            <returns>解析结果</returns>
        </member>
        <member name="T:Ivony.Data.RollbackException">
            <summary>
            用于回滚数据库事务的异常对象
            </summary>
        </member>
        <member name="M:Ivony.Data.RollbackException.#ctor">
            <summary>
            创建 RollbackException 对象
            </summary>
        </member>
        <member name="T:Ivony.Data.TemplateExtensions">
            <summary>
            有关模板的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Data.TemplateExtensions.Concat(Ivony.Data.Queries.ParameterizedQuery,Ivony.Data.Queries.ParameterizedQuery)">
            <summary>
            串联两个参数化查询对象
            </summary>
            <param name="firstQuery">第一个参数化查询对象</param>
            <param name="secondQuery">第二个参数化查询对象</param>
            <returns>串联后的参数化查询对象</returns>
        </member>
        <member name="M:Ivony.Data.TemplateExtensions.Concat(Ivony.Data.Queries.ParameterizedQuery,System.FormattableString)">
            <summary>
            串联两个参数化查询对象
            </summary>
            <param name="firstQuery">第一个参数化查询对象</param>
            <param name="secondQuery">第二个参数化查询对象</param>
            <returns>串联后的参数化查询对象</returns>
        </member>
        <member name="M:Ivony.Data.TemplateExtensions.ConcatQueries(Ivony.Data.Queries.ParameterizedQuery,Ivony.Data.Queries.ParameterizedQuery[])">
            <summary>
            串联多个参数化查询对象
            </summary>
            <param name="firstQuery">第一个参数化查询对象</param>
            <param name="otherQueries">要串联的其他参数化查询对象</param>
            <returns>串联后的参数化查询对象</returns>
        </member>
        <member name="M:Ivony.Data.TemplateExtensions.AsParameters(System.Array)">
            <summary>
            将数组转换为参数列表对象
            </summary>
            <param name="array">要转换的数组对象</param>
            <returns>参数列表对象</returns>
        </member>
        <member name="M:Ivony.Data.TemplateExtensions.AsParameters(System.Array,System.String)">
            <summary>
            将数组转换为参数列表对象
            </summary>
            <param name="array">要转换的数组对象</param>
            <returns>参数列表对象</returns>
        </member>
        <member name="M:Ivony.Data.TemplateExtensions.AppendName(Ivony.Data.Queries.IParameterizedQueryBuilder,System.String)">
            <summary>
            将一个字符串当作数据库对象名称添加到参数化查询构建器中
            </summary>
            <param name="builder">参数化查询构建器</param>
            <param name="name">数据库对象名称</param>
        </member>
    </members>
</doc>
